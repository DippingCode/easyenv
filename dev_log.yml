tasks:
  - name: "Datasource: buscar tool por nome"
    date: "2025-08-17T19:10:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "24"
    task: "Adicionar tools_ds_get_tool_by_name ao tools_datasource.sh"
    commit: "feat(data/datasource): tools_ds_get_tool_by_name retorna entidade JSON por nome"
    files_updated:
      - path: "src/data/datasources/tools_datasource.sh"
        type: "bash"
    summary:
      - Retorna um único objeto JSON correspondente a `.tools[] | select(.name == $n)`.
      - Em caso de não encontrado, arquivo ausente ou yq indisponível → `{}`.
    notes:
      - Comparação é exata e sensível a maiúsculas/minúsculas (mantido simples por enquanto).
    next_steps:
      - Implementar `tools_ds_update_tool` (atualizar uma tool no catálogo).

  - name: "Datasource: listar ferramentas (read-only)"
    date: "2025-08-17T19:00:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "23"
    task: "Adicionar tools_ds_get_tools ao tools_datasource.sh (retorno JSON de tool_entity)"
    commit: "feat(data/datasource): tools_ds_get_tools retorna JSON de config/tools.yml"
    files_updated:
      - path: "src/data/datasources/tools_datasource.sh"
        type: "bash"
    summary:
      - Método lê `config/tools.yml` (ou `EASYENV_TOOLS_YML`) e retorna `[].tools` como JSON.
      - Resolutor de caminho robusto: `EASYENV_TOOLS_YML` → `EASYENV_HOME/config/tools.yml` → `config/tools.yml`.
      - Falta de `yq` ou arquivo ausente retorna `[]` sem quebrar UX.
    notes:
      - A entidade será tratada como JSON pelas camadas `domain/presenter` até termos o parser da `tool_entity`.
    next_steps:
      - Implementar `tools_ds_get_tool_by_name` (retorna 1 item JSON).

  - name: "tools list: versões instaladas e latest + sync no YAML"
    date: "2025-08-17T18:55:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "22"
    task: "Detectar versões (instalada/latest) a partir do ambiente e sincronizar no config/tools.yml"
    commit: "fix(cli/tools): detectar versões via check/binário/brew; atualizar version_installed/version_latest; melhorar list"
    files_updated:
      - path: "src/presenter/cli/tools.sh"
        type: "bash"
    summary:
      - Ordem de detecção: `check_version_cmd` → binário (`--version`/`-v`) → `brew list`.
      - “latest” por `brew info --json=v2` com fallback textual.
      - Sincroniza `version_installed`/`version_latest` no `config/tools.yml`.
    notes:
      - Para ferramentas sem binário e sem brew (ex.: frameworks), a versão pode permanecer “-”.
    next_steps:
      - Exibir status por item (OK/Outdated/Missing) e filtros (`--only`, `--type`).

  - name: "Tools list — correção de detecção de versões + debug por item"
    date: "2025-08-17T18:55:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "21"
    task: "Tornar detecção de versões robusta (installed/latest) e incluir modo --debug por ferramenta"
    commit: "fix(cli/tools): tolerar falhas de check_version_cmd com pipefail; melhorar brew info fallback; debug por item"
    files_updated:
      - path: "src/presenter/cli/tools.sh"
        type: "bash"
    summary:
      - `check_version_cmd` não derruba mais a pipeline; fallback para fórmula/cask.
      - “latest” via `brew info --json` com fallback textual confiável.
      - `--debug` mostra formula/cask/check de cada tool durante o list/detailed.
    notes:
      - Com `jq` presente, a leitura de `brew info --json` é preferida.
    next_steps:
      - Adicionar coluna “Status” (OK/Outdated/Missing) e flags de filtro (`--only`, `--type`).

  - name: "Tools list com sync de versões"
    date: "2025-08-17T18:46:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "20"
    task: "Aprimorar tools list para detectar e sincronizar versões instaladas e mais recentes"
    commit: "feat(cli/tools): detectar installed/latest mesmo sem check_version_cmd; sync .version_installed/.version_latest em config/tools.yml; robustez sem Homebrew/JQ"
    files_updated:
      - path: "src/presenter/cli/tools.sh"
        type: "bash"
    summary:
      - `list` agora calcula `installed` e `latest` de forma dinâmica e grava no catálogo.
      - `--detailed` e `--json` estáveis; `--debug` exibe resolução de paths e dependências.
      - Execução segura com `set -euo pipefail`, sem abortar quando não há Homebrew.
    notes:
      - Com `jq` instalado, a versão “latest” de fórmulas/casks fica mais precisa (via `brew info --json`).
    next_steps:
      - Exibir uma coluna “Status” (OK/Outdated/Not installed) e filtros `--only`/`--type`/`--section`.

  - name: "Fix tools discovery + seed inicial"
    date: "2025-08-17T18:16:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "19"
    task: "Corrigir leitura do catálogo e entregar seed funcional de ferramentas"
    commit: "fix(tools): corrigir YAML malformado e refazer cli/tools.sh; adicionar catálogo padrão"
    files_updated:
      - path: "src/presenter/cli/tools.sh"
        type: "bash"
    files_created:
      - path: "config/tools.yml"
        type: "yaml"
    summary:
      - Removido marcador `...` inválido do YAML; `.tools` agora é lido corretamente pelo yq.
      - Reescrito `tools.sh` (list/install/update/uninstall) com tratamento de erros e dependências.
      - Catálogo inicial inclui oh-my-zsh, powerlevel10k, yq, fzf, zoxide, e utilitários populares.
    notes:
      - `yq` é requisito; o comando valida presença e dá mensagem amigável.
      - O caminho do catálogo resolve via `EASYENV_HOME/config/tools.yml` por padrão.
    next_steps:
      - Conectar `tools install` com injeção de env/aliases/paths no `.zshrc` a partir do catálogo.
      - Adicionar `tools doctor` para verificação rápida de versões/health.

  - name: “Ferramentas: update & uninstall (catálogo)”
    date: “2025-08-17T16:45:00-03:00”
    author: “easyenv-assistant”
    version_scope: “0.0.1”
    version: “0.0.1”
    build: “18”
    task: “Adicionar comandos para atualizar e desinstalar todas as ferramentas do catálogo”
    commit: “feat(tools): add update/uninstall for all catalog tools via data/services/tools.sh”
    files_created:
    	-	path: “src/data/services/tools.sh”
        type: “bash”
    files_updated:
    	-	path: “src/presenter/cli/tools.sh”
        type: “bash”
    summary:
      -	Novo easyenv tools update para atualizar todas as ferramentas definidas em config/tools.yml.
      -	Novo easyenv tools uninstall para desinstalar todas as ferramentas do catálogo (com confirmação).
      -	Serviço data/services/tools.sh faz o trabalho pesado (brew/yq/git/npm), isolando a infra do presenter.
      -	`Garantias automáticas:` Homebrew + brew shellenv + yq; Node é instalado se necessário para pacotes npm globais.
      -	tools list continua disponível com --detailed e --json.
    notes:
    	-	O tools uninstall pergunta confirmação antes de remover tudo.
    	-	tools update executa brew update e tenta update_cmd específico quando definido no catálogo.
    	-	O serviço usa bash -lc para executar scripts de instalação/remoção definidos no YAML.
    next_steps:
    	-	Integrar easyenv tools install ao bin/install.sh como etapa pós-clone opcional.
    	-	Expandir config/tools.yml com mais utilitários (chezmoi, docker-compose-switch, lolcat etc).
    	-	Adicionar easyenv doctor e easyenv sync para diagnóstico e espelhamento do ambiente.

  - name: "Comando tools list"
    date: "2025-08-17T17:05:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "17"
    task: "Adicionar easyenv tools list (listagem do catálogo de ferramentas)"
    commit: "feat(tools): implementar listagem com --detailed e --json"
    files_updated:
      - path: "src/presenter/cli/tools.sh"
        type: "bash"
    summary:
      - `easyenv tools list` lê `config/tools.yml` e exibe Seção/Nome/Tipo/Status/Versão.
      - `--detailed` tenta detectar instalação/versão (check_version_cmd → brew → command -v).
      - `--json` imprime o array `.tools` em JSON (dump direto do YAML).
    notes:
      - Requer `yq` instalado (já tratado pelo `tools install`).
    next_steps:
      - Implementar `easyenv tools update` e `easyenv tools doctor`.

  - name: "Comando tools install"
    date: "2025-08-17T16:55:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "16"
    task: "Criar comando easyenv tools install e integrar ao instalador"
    commit: "feat(tools): adicionar presenter/cli/tools.sh e usar no install.sh"
    files_created:
      - path: "src/presenter/cli/tools.sh"
        type: "bash"
    files_updated:
      - path: "bin/install.sh"
        type: "bash"
    summary:
      - Novo comando `easyenv tools install` para instalar pré-requisitos e utilitários.
      - Instalador 1-liner passou a invocar o comando oficial (melhor organização e logging).
    notes:
      - A lógica de instalação permanece centralizada em `src/data/services/tools.sh`.
      - O comando pode ser reexecutado a qualquer momento de forma idempotente.
    next_steps:
      - Adicionar `easyenv tools list` (ler `config/tools.yml`) e `easyenv tools update`.
      
  - name: "Bootstrap de ferramentas e correções do router"
    date: "2025-08-17T16:45:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "15"
    task: "Criar tools.yml + tools.sh (bootstrap) e corrigir router/log"
    commit: "feat(bootstrap): tools.yml + instalador automático; fix(router): variáveis e GUID no stdout"
    files_created:
      - path: "config/tools.yml"
        type: "yaml"
      - path: "src/data/services/tools.sh"
        type: "bash"
    files_updated:
      - path: "src/core/router.sh"
        type: "bash"
      - path: "bin/install.sh"
        type: "bash"
    summary:
      - Instalação automática de pré-requisitos (Homebrew, yq), oh-my-zsh e tema spaceship.
      - Catálogo `config/tools.yml` com utilitários de qualidade de vida.
      - `router.sh` não imprime mais o GUID e não falha com variáveis não inicializadas.
      - `install.sh` chama o bootstrap de ferramentas no final.
    notes:
      - O tema padrão agora é spaceship (ajustável depois via `easyenv theme`).
      - Após a instalação, execute `source ~/.zprofile && source ~/.zshrc`.
    next_steps:
      - Criar `presenter/cli/status.sh` básico e `presenter/cli/update.sh`.
      - Adicionar comando `easyenv tools install` (wrapper) usando o mesmo serviço.

  - name: "Correções de version/logging"
    date: "2025-08-17T16:35:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "14"
    task: "Corrigir leitura de versão (fallback) e erro de printf no logging"
    commit: "fix(version,logging): fallback robusto de versão e remoção de printf -- no logging"
    files_updated:
      - path: "src/presenter/cli/version.sh"
        type: "bash"
      - path: "src/core/logging.sh"
        type: "bash"
    summary:
      - Fallback de versão agora usa grep+sed e funciona sem yq.
      - Removido uso potencial de 'printf --' no logging; impressão JSON padronizada.
    notes:
      - Caso docs/dev_log.yml não exista, exibimos 'v0.0.0' como fallback.
    next_steps:
      - Implementar `version --detailed` com fallback sem yq (opcional) exibindo listas formatadas (atual com yq já OK).

  - name: "Installer: banner + auto-help"
    date: "2025-08-17T16:25:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "13"
    task: "Aprimorar bin/install.sh com banner e execução automática do help"
    commit: "fix(install): banner de boas-vindas e execução automática do help via shim absoluto"
    files_updated:
      - path: "bin/install.sh"
        type: "bash"
    summary:
      - Mostra banner “EasyEnv Installer” e “Welcome to EasyEnv” no pós-instalação.
      - Executa `easyenv help` automaticamente, sem depender de PATH.
      - Garante permissões +x em todos os `*.sh` do `src/` e no shim.
      - Cria diretórios de runtime (`var/logs`, `var/backups`, `var/snapshot`).
      - Atualiza `~/.zprofile` para incluir `~/.local/bin` de forma idempotente.
    notes:
      - Em caso de erro no auto-help, instruções claras para `source ~/.zprofile`.
    next_steps:
      - Adicionar banner no `help` para uma apresentação mais rica do CLI.

  - name: "Fix logging: quotes e compat wrappers"
    date: "2025-08-17T16:20:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "12"
    task: "Corrigir logging.sh (quotes/EOF), unificar API e compatibilidade"
    commit: "fix(logging): corrigir quotes e expor wrappers compatíveis; user.log/debug.log robustos"
    files_updated:
      - path: "src/core/logging.sh"
        type: "bash"
    summary:
      - Corrige erro `EOF inesperado` por aspas desbalanceadas.
      - user.log em JSON Lines; debug.log com stdout/stderr correlacionado.
      - Mantém wrappers (`log_request_start/end`, `log_line`) para compat.
    notes:
      - Router deve redirecionar stdout/stderr para `$EASYENV_LOG_STDOUT/$EASYENV_LOG_STDERR`.
    next_steps:
      - Implementar `version --detailed` lendo a primeira entrada do `docs/dev_log.yml`.

  - name: "Fix printf no installer e harden de fluxo"
    date: "2025-08-17T16:05:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "11"
    task: "Corrigir printf, tornar instalador idempotente e robusto"
    commit: "fix(install): usar 'printf --' e tornar instalação idempotente (clone/pull, shim, PATH)"
    files_updated:
      - path: "bin/install.sh"
        type: "bash"
    summary:
      - Corrigido erro `printf: ->: invalid option` usando `printf --`.
      - Instalador idempotente (clona ou atualiza, recria shim, garante PATH).
      - Define permissão de execução para todos `.sh` em `src/`.
    notes:
      - Após instalação: `source ~/.zprofile` ou abra um novo terminal.
    next_steps:
      - Implementar `version --detailed` lendo a primeira entrada do `docs/dev_log.yml`.

  - name: "Fix installer permissions + help mínimo"
    date: "2025-08-17T15:58:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "10"
    task: "Corrigir permissões de execução e adicionar comando help básico"
    commit: "fix(install): chmod +x e correção do banner; feat(help): adicionar help mínimo; chore(router): garantir execução via main.sh"
    files_updated:
      - path: "bin/install.sh"
        type: "bash"
      - path: "src/main.sh"
        type: "bash"
      - path: "src/core/router.sh"
        type: "bash"
    files_created:
      - path: "src/presenter/cli/help.sh"
        type: "bash"
    summary:
      - Corrigido erro **Permission denied** ao rodar `easyenv` após instalação (aplica `chmod +x` em `src/main.sh` e scripts essenciais).
      - Ajustado banner para exibir **EasyEnv** (substitui rótulo incorreto).
      - Adicionado comando **`easyenv help`** mínimo com listagem dinâmica de comandos.
      - Router garante despacho via `main.sh` e prepara ponto único de logging.
    notes:
      - Se o shim antigo existir em `~/.local/bin/easyenv`, ele será sobrescrito; caso persista erro, apagar o shim manualmente e reinstalar.
      - O help atual é básico; descreverá melhor cada comando quando os módulos forem migrados.
    next_steps:
      - Implementar `version --detailed` lendo a primeira entrada do `docs/dev_log.yml` (inclui version/build/summary/notes/next_steps).
      - Criar `status`, `version` e `push` em `presenter/cli/` e integrar logging centralizado no router.

  - name: "Fix install wrapper + banner EasyEnv"
    date: "2025-08-17T15:55:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "09"
    task: "Corrigir banner e erro de Permission denied no wrapper"
    commit: "fix(install): wrapper chama bash main.sh; corrigir banner para EasyEnv"
    files_updated:
      - path: "bin/install.sh"
        type: "bash"
    summary:
      - Wrapper agora invoca `bash src/main.sh`, evitando Permission denied.
      - Banner renomeado para EasyEnv (removido resquício de Angular).
      - Garante `~/.local/bin` no PATH e aplica `chmod +x` em `src/main.sh` se existir.
    notes:
      - Reexecutar o 1-liner atualiza o wrapper e corrige o PATH.
    next_steps:
      - Implementar `src/main.sh` e `core/router.sh` estáveis; `easyenv help` funcional.

  - name: "Core mínimo + logging centralizado"
    date: "2025-08-17T15:16:35-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "08"
    task: "Criar utils/logging/guards e centralizar logging no router"
    commit: "feat(core): add utils/logging/guards; refactor(router): centralizar logging por comando; feat(cli): add help básico"
    files_created:
      - path: "src/presenter/cli/help.sh"
        type: "bash"
      - path: "src/core/utils.sh"
        type: "bash"
      - path: "src/core/logging.sh"
        type: "bash"
      - path: "src/core/guards.sh"
        type: "bash"
    files_updated:
      - path: "src/core/router.sh"
        type: "bash"
    summary:
      - Adicionado `core/utils.sh` com helpers (cores, confirm, humanize, etc.).
      - Adicionado `core/logging.sh` com logs correlacionados (GUID) em `var/logs/user.log` e `var/logs/debug.log`.
      - Adicionado `core/guards.sh` com `require_cmd` e checagens básicas.
      - `router.sh` ajustado para **logar em um ponto único** todas as execuções de comandos.
      - Criado `presenter/cli/help.sh` (help básico) para o bootstrap do CLI.
    notes:
      - O GUID de cada execução é compartilhado entre user/debug logs para correlação.
      - `debug.log` inclui a saída completa do comando; `user.log` registra evento resumido.
      - Pastas `var/logs` são criadas on-demand; mantidas fora do git (via `.gitignore`).
    next_steps:
      - Implementar `presenter/cli/version.sh` lendo `dev-log.yml` e suportando `--detailed`.
      - Criar `presenter/cli/push.sh` (commit/tag/push com base na última entrada do dev-log).
      - Implementar `presenter/cli/status.sh` mínimo (sem integração de plugins).
      - Esqueleto de `data/services/i18n_service.sh` e estrutura `presenter/environment/i18n`.

  - name: "Versão detalhada e dev-log newest-first"
    date: "2025-08-17T16:40:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "07"
    task: "Ajustar push p/ tasks[0] e adicionar easyenv version --detailed"
    commit: "feat(version): detalhado via dev-log (tasks[0]); push agora incrementa build da primeira entrada"
    files_updated:
      - path: "src/presenter/cli/push.sh"
        type: "bash"
    files_created:
      - path: "src/presenter/cli/version.sh"
        type: "bash"
    summary:
      - Dev-log agora considerado newest-first (primeira entrada = corrente).
      - `easyenv version --detailed` imprime dados completos da build (summary, notes, next_steps).
      - `push` incrementa `build` em `tasks[0]` e atualiza `date` automaticamente.
    notes:
      - Para uso rápido de `version` (sem --detailed) lê-se apenas as primeiras linhas (configurável via DEVLOG_HEAD_LINES).
      - Para detalhes, yq lê o arquivo inteiro (necessário para arrays grandes).
    next_steps:
      - Implementar `core/utils.sh`, `core/logging.sh`, `core/guards.sh` mínimos (se ainda não existem).
      - Router deve mapear `-v/--version` → `version`.

  - name: "Bootstrap push/main/config/install"
    date: "2025-08-17T15:05:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "06"
    task: "Criar cmd_push, main.sh, core/config.sh e bin/install.sh"
    commit: "feat(core): adicionar push, main, config e instalador local"
    files_created:
      - path: "src/presenter/cli/push.sh"
        type: "bash"
      - path: "src/main.sh"
        type: "bash"
      - path: "src/core/config.sh"
        type: "bash"
      - path: "bin/install.sh"
        type: "bash"
    summary:
      - `push`: usa dev-log para commit/tag; incrementa `build` automaticamente; push + push --tags.
      - `main.sh`: ponto de entrada mínimo, carrega `core/*` e despacha via router.
      - `core/config.sh`: variáveis e paths globais; criação de diretórios em `var/`.
      - `install.sh`: bootstrap local (clone/atualiza repo, cria shim em ~/.local/bin).
    notes:
      - Router deve ter case para `push` (executar `cmd_push`).
      - Requer `yq` para manipular dev-log; sem `yq` o push não roda.
    next_steps:
      - Adicionar `core/utils.sh`, `core/logging.sh`, `core/guards.sh` mínimos.
      - Migrar `help`, `version`, `status` para `presenter/cli/`.

  - name: "Versão lê build do dev-log"
    date: "2025-08-17T14:25:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "05"
    task: "Atualizar cmd_version para considerar campo build do dev-log"
    commit: "feat(version): exibir build do dev-log em easyenv -v"
    files_updated:
      - path: "src/presenter/cli/version.sh"
        type: "bash"
    summary:
      - `easyenv -v` agora mostra `vX.Y.Z (build NN)` quando `build` existir no dev-log.
      - Fallbacks: README (Release version) e variáveis `EASYENV_VERSION`/`EASYENV_BUILD`.
    notes:
      - Requer `yq` para leitura do dev-log; sem `yq`, cai nos fallbacks.
    next_steps:
      - Integrar `cmd_push` para incrementar `build` automaticamente ao commitar e taggear.

  - name: "Router de comandos"
    date: "2025-08-17T13:20:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "04"
    task: "Criar core/router.sh para despachar subcomandos"
    commit: "feat(router): adicionar roteador de subcomandos dinâmico (presenter/cli)"
    files_created:
      - path: "src/core/router.sh"
        type: "bash"
    summary:
      - Despacho dinâmico: carrega `src/presenter/cli/<cmd>.sh` e executa `cmd_<cmd>`.
      - Aliases suportados: -h/--help, -v/--version, upgrade→update, diag→doctor, etc.
      - Mensagens de uso e listagem automática de comandos com base nos arquivos do diretório.
    notes:
      - O `main.sh` deve chamar `router_dispatch "$@"` após carregar `core/*`.
      - O `cmd_push` já está coberto pelo case `push`.
    next_steps:
      - Adicionar `src/main.sh` mínimo e `core/{config,utils,logging,guards}.sh`.
      - Migrar os comandos existentes para `src/presenter/cli/*.sh`.
  
  - name: "Comando push (commit + tag + push via dev-log)"
    date: "2025-08-17T12:00:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "03"
    task: "Criar comando easyenv push"
    commit: "feat(push): adicionar comando para commit/tag/push baseado no dev-log"
    files_created:
      - path: "src/presenter/cli/push.sh"
        type: "bash"
    files_updated:
      - path: "dev_log.yml"
        type: "yaml"
    summary:
      - Lê último item do dev-log para montar commit e identificar versão.
      - Adiciona todos os arquivos, cria commit (se houver mudanças).
      - Compara versão do dev-log com última tag; se diferente e não existir, cria tag anotada.
      - Executa git push do branch atual e push das tags.
    notes:
      - Suporta `--dry-run`, `--no-tag`, `--remote`, `--branch`.
      - Procura dev-log nos arquivos: dev_log.yml, dev-log.yml, dev-log.yaml, dev_log.yaml.
      - Requer `yq` para parse; se ausente, cai em commit padrão.
    next_steps:
      - Atualizar `core/router.sh` para rotear `push` → `cmd_push`.
      - (Opcional) Sincronizar ‘Release version’ do README com a versão do dev-log.
  
  - name: "Padronização do .gitignore (runtime e lixos)"
    date: "2025-08-17T00:00:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1"
    version: "0.0.1"
    build: "02"
    task: "Atualizar .gitignore para ignorar var/ e backups/ (runtime), além de artefatos de SO/editores."
    commit: "chore(gitignore): ignorar var/ e backups/ + lixos comuns (macOS, IDEs, caches zsh)"
    files_updated:
      - path: ".gitignore"
        type: "config"
    files_created: []
    summary:
      - Evita versionar diretórios de runtime (`/var`, `/backups`) e arquivos temporários.
      - Inclui regras para macOS (.DS_Store), IDEs (.vscode/, .idea/), caches do zsh (.zcompdump*).
    notes:
      - Caso precise versionar algo em /var no futuro, usar exceção com prefixo `!`.
    next_steps:
      - Iniciar 0.0.1: scaffolding DDD — criar `src/main.sh`, `src/core/{config.sh,utils.sh,logging.sh,router.sh,guards.sh}` e `src/presenter/cli/{help.sh,version.sh,status.sh}`.

  - name: "Criação dos novos arquivos"
    date: "2025-08-16T12:00:00-03:00"
    author: "easyenv-assistant"
    version_scope: "0.0.1..0.0.7 (bootstrap do changelog)"
    version: "0.0.1"
    build: "01"
    task: "Criar arquivo de changelog inicial"
    commit: "texto para adicionar ao commit"
    files_updated:
      - path: "readme.md"
        type: "markdown"
    files_created:
      - path: "relases.md"
        type: "markdown"
    summary:
      - Adicionado arquivo `relases.md` com histórico das versões 0.0.1 a 0.0.7.
      - Estrutura alinhada ao backlog definido (DDD + etapas do MVP).
    notes:
      - README deverá conter a seção 'Release version' consultada pela ferramenta.
      - Datas das versões estão como placeholders (YYYY-MM-DD) para preencher no release real.
    next_steps:
      - Iniciar 0.0.1: criar `src/main.sh`, `core/router.sh`, `core/{config,utils,logging,guards}.sh` e `presenter/cli/{help,version,status}.sh` (básico).